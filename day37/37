Day 38 : 

Hashmap Implementation : 
static class HashMap<K, V> {
        private class Node {
            K key;
            V value;
            public Node(K key , V value) {
                this.key = key;
                this.value = value;                
            }
        }

        private int n; //n = nodes
        private int N; // N = buckets
        private LinkedList<Node> buckets[];

        @SuppressWarnings("unchecked")
        public HashMap(){
            this.N = 4;
            this.buckets = new LinkedList[4];
            for(int i = 0; i<N; i++){
                buckets[i] = new LinkedList<>();
            }
        }

        private int hashFunction(K key){
            int bi = key.hashCode();
            return Math.abs(bi) % N;
        }

        private int searchInLL(K key, int bi){
            LinkedList<Node> ll = buckets[bi];

            for(int i = 0; i<ll.size(); i++){
                if(ll.get(i).key == key){
                    return i;
                }
            }

            return -1;
        }

        @SuppressWarnings("unchecked")
        private void rehash(){
            LinkedList<Node> oldBucket[] = buckets;
            buckets = new LinkedList[N*2];

            for(int i = 0; i<N*2; i++){
                buckets[i] = new LinkedList<>();
            }

            for(int i = 0; i<oldBucket.length; i++){
                LinkedList<Node> ll = oldBucket[i];
                for(int j = 0; j<ll.size() ; j++){
                    Node node = ll.get(i);
                    put(node.key, node.value);
                }
            }
        }

        public void put(K key, V value){
            int bi = hashFunction(key);//bucket index
            int di = searchInLL(key, bi);

            if(di == -1) { //key doesn't exists 
                buckets[bi].add(new Node(key , value));
                n++;
            } else { //key index
                Node node = buckets[bi].get(di);
                node.value = value;
            }

            double lambda = (double)n/N;
            if(lambda > 2.0){
                rehash();
            }
        }

        public V get(K key) {
            int bi = hashFunction(key);
            int di = searchInLL(key, bi);

            if(di == -1){
                return null;
            } else {
                Node node = buckets[bi].get(di);
                return node.value;
            }
        }

        public boolean contains(K key){
            int bi = hashFunction(key);
            int di = searchInLL(key, bi);
            if(di == -1){
                return false;
            } else {
                return true;
            }
        }

        public V remove(K key){
            int bi = hashFunction(key);
            int di = searchInLL(key, bi);
            
            if(bi == -1){
                return null;
            } else {
                Node node = buckets[bi].remove(di);
                n--;
                return node.value;
            }
        }

        public ArrayList<K> keySet(){
            ArrayList<K> keys = new ArrayList<>();

            for(int i = 0; i<buckets.length; i++){ //bi
                LinkedList<Node> ll = buckets[i];
                for(int j = 0; j<ll.size(); j++){ //di
                    Node node = ll.get(j);
                    keys.add(node.key);
                }
            }
            return keys;
        }

        public boolean isEmpty(){
            return n == 0;
        }
    }

    public static void main(String[] args) {
        HashMap<String, Integer> map = new HashMap<String,Integer>();

        System.out.println(map.isEmpty());

        map.put("India", 100);
        map.put("US", 50);
        map.put("China", 80);

        System.out.println(map.get("US"));
        
        System.out.println(map.contains("India"));
        System.out.println(map.contains("In"));

        System.out.println(map.remove("China"));
        System.out.println(map.contains("China"));

        System.out.println(map.keySet());

        ArrayList<String> keys = map.keySet();

        for(int i = 0; i<keys.size(); i++){
            System.out.println(keys.get(i) + " " + map.get(keys.get(i)));
        }
    }