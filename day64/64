Day 64 : 
<!--  Add Two Numbers -->
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0);
        ListNode curr = head;
        int carry = 0;
        while(l1 != null && l2 != null){
            int x = l1.val  + l2.val + carry;
            carry = 0;
            if(x > 9) {
                curr.next = new ListNode(x%10);
                carry = x/10;
            } else {
                curr.next = new ListNode(x);
            }
            curr = curr.next;
            l1 = l1.next;
            l2 = l2.next;
        }

        if(l1 != null){
            while(l1 != null){
                int x = l1.val + carry;
            carry = 0;
                if(x > 9) {
                    curr.next = new ListNode(x%10);
                    carry = x/10;
                } else {
                    curr.next = new ListNode(x);
                }
                curr = curr.next;
                l1 = l1.next;
            }
        } else if (l2 != null){
            while(l2 != null){
                int x = l2.val + carry;
            carry = 0;

                if(x > 9) {
                    curr.next = new ListNode(x%10);
                    carry = x/10;
                } else {
                    curr.next = new ListNode(x);
                }
                curr = curr.next;
                l2 = l2.next;
            }
        }

        if(carry > 0){
            curr.next = new ListNode(carry);
        }
        return head.next;
    }
}




20. Valid Parentheses
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false

Constraints:
1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

class Solution {
    public boolean isValid(String s) {
        Stack<Character> st = new Stack<>();
        for (int i = 0; i<s.length(); i++){
            char ch = s.charAt(i);
            if(ch == '{' || ch == '[' || ch == '('){
                st.push(ch);
            } else {
                if(st.isEmpty()) return false; // when there is no opening bracket
                if(ch == '}'){
                    if(st.pop() != '{') return false;
                }
                if(ch == ')'){
                    if(st.pop() != '(') return false;
                }
                if(ch == ']'){
                    if(st.pop() != '[') return false;
                }
            }
        }

        if(st.isEmpty() == false) return false; // when there is no closing bracket
        return true;
    }
}