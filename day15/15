Day 15 : 

//Recursion
//syntax {
/*  base condition
*   kaam
*   recursive call
*   }
*/ 


1. Print num from 1 to 5
    public static void printNum(int n){
        if(n==0){
            return;
        }
        // System.out.println(n);
        printNum(n-1);
        System.out.println(n);
    }
    public static void main(String[] args) {
        int n = 5;
        printNum(n);
    }

2. Print sum of first n natural numbers
    public static void printSum(int n, int sum, int i){
        if(i==n){
            sum+=i;
            System.out.println(sum);
            return;
        }
        sum+=i;
        printSum(n, sum, i+1);
        
    }
    public static void main(String[] args) {
        int n = 10;
        printSum(n, 0, 1);
    }

3. Print Factorial of n
    public static int calFact(int n){
        if(n==1 || n ==0){
            return 1;
        }
        int fact_nm1 = calFact(n-1);
        int fact = n * fact_nm1;
        return fact;
    }
    public static void main(String[] args) {
        int n = 5;
        System.out.println(calFact(n));
    }

4. Print fibonacci sequence 
    public static void printFib(int first, int second, int n, int i) {
        if(i==n){
            int third = first + second;
            System.out.print(" " + third);
            return;
        }
        int third = first + second;
        System.out.print(" " + third);
        printFib(second, third, n, i+1);
    }
    public static void main(String[] args) {
        int n =15;
        System.out.print("0 1");
        printFib(0, 1, n-2, 1);
    }

5. Print x^n (stack height = n)
    public static int cal(int x, int n){
        if(x==0){
            return 0;
        }
        if(0==n){
            return 1;
        }
        int xPowernm1  = cal(x, n-1);
        int xPower = x * xPowernm1;
        return xPower;
    }
    public static void main(String[] args) {
        int x = 2, n =5;
        System.out.println(cal(x, n));        
    }
