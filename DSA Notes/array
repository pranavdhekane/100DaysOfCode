//Types of Arrays
1. Based on memory allocation 
    i. Static arrays 
    ii. Dynamic arrays
2. Based on Dimensions
    i. One dimesional array 
    ii. multi dimensional array

// Array Syntax
type[] arrayName = new type[size];
type arrayName[] = new type[size];

type[] marks = {val1, val2, val3, ...}; // initialized array 

// 2d array syntax 
type[][] arrayName = new type[rows][columns];

/////OPERATIONS ON ARRAY/////
// Array Searching 
1. Linear Search
goes from one end of an array until the element is found
Time Complexity : O(N) // N is number of elements 

2. Binary Search
this algorhithm is used on sorted array. The elements is found by repeatedly dividing array into half and deciding which part to choose next
Time Complexity : O(log_2 N)

3. Ternary Search
similar to binary search , but in the algorhithm the array is divided into three parts 
Time Complexity : O(log_3 N)

// Reversing an array 
1. Using extra array 
Time Complexity : O(N)
Space Complexity : O(N)

    public static void main(String[] args){
        // previous array 
        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
        // reversed array
        int[] newArr = new int[arr.length];

        for(int i = 0; i< arr.length; i++){
            newArr[i] = arr[arr.length-i-1];
        }
        
        //printing reversed array
        for(int i=0; i<newArr.length; i++){
            System.out.print(newArr[i] + " ");
        }
    }


2. Using Temp variable and loop
Time Complexity: O(n)
Auxillary Space Complexity : O(1)

    public static void main(String[] args){
        // previous array 
        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
        int temp;
        
        for(int i=0; i< arr.length/2 ; i++) {
            temp = arr[i];
            arr[i] = arr[arr.length - i- 1];
            arr[arr.length - i- 1] = temp;
        }

        for(int i =0; i< arr.length; i++){
            System.out.println(arr[i]);
        }
    }

3. Using Recursion

4. Using Stack


// Array left rotation by d positions 
    //Given an array of integers arr[] of size N and an integer, the task is to rotate the array elements to the left by d positions.
    1. Using Temp array 
    i. Store elements from idx d to n-1 in temp array 
    ii. store elements from idx 1 to d-1 in temp array 
    iii. original array = temp array 

    public class RotateArray {
        public static void rotate(int arr[], int d, int n){
            int[] temp = new int[n];
            int j = 0;
            for(int i = d; i< n; i++){
                temp[j] = arr[i];
                j++;
            }
            for(int i = 0; i<d; i++){
                temp[j] = arr[i];
                j++;
            }
    
            for(int i =0; i<n; i++){
                arr[i] = temp[i];
            }
    
            return;
        }
    
        public static void printArray(int arr[]){
            for(int i =0; i < arr.length; i++){
                System.out.print(arr[i] + " ");
            }
            System.out.println();
            return;
        }
        public static void main(String[] args){
            Scanner sc = new Scanner(System.in);
    
            //Input array size 
            System.out.println("Enter array size and then array elements");
            int n = sc.nextInt();
    
            int[] arr = new int[n];
            //input array 
            for(int i =0; i< n; i++){
                arr[i] = sc.nextInt(); 
            }
    
            //input positions (d)
            System.out.println("Enter d");
            int d = sc.nextInt();
    
            //printing original array 
            System.out.println("Original Array : ");
            printArray(arr);
    
            rotate(arr, d, n);
            
            //printing rotated array
            System.out.println("Printing arry rotated by " + d + " postions");
            printArray(arr);
        }
    }

    2. Rotating array one by one (First element will become last)
        array will be rotated until desired output is reached(d times)

    Time Complexity : O(N * d)
    Auxillary Space: O(1)

        public class rotate  {
        public static void rotate (int arr[], int d, int n){
            int i = 0;
            while(i<d){
                int temp = arr[0];
                for(int j=0; j<n-1; j++){
                    arr[j] = arr[j+1];
                }
                arr[n-1]= temp;
                i++;
            }
        }

        public static void printArray(int arr[]){
            for(int i =0; i < arr.length; i++){
                System.out.print(arr[i] + " ");
            }
            System.out.println();
            return;
        }
        public static void main(String[] args){
            Scanner sc = new Scanner(System.in);

            //Input array size 
            System.out.println("Enter array size and then array elements");
            int n = sc.nextInt();

            int[] arr = new int[n];
            //input array 
            for(int i =0; i< n; i++){
                arr[i] = sc.nextInt(); 
            }

            //input positions (d)
            System.out.println("Enter d");
            int d = sc.nextInt();

            //printing original array 
            System.out.println("Original Array : ");
            printArray(arr);

            rotate(arr, d, n);
            
            //printing rotated array
            System.out.println("Printing arry rotated by " + d + " postions");
            printArray(arr);
        }
    }

        
    3. Using Jugling Algorithm

    4. reversal algorithm
        

//Search, Insert, and Delete in an Unsorted Array 

1.Search Opearation //using linear traversal from left to right 
Time Complexity: O(N)
Space Complexity: O(1)

    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);

        //Input array size 
        System.out.println("Enter array size and then array elements");
        int n = sc.nextInt();

        int[] arr = new int[n];
        //input array 
        for(int i =0; i< n; i++){
            arr[i] = sc.nextInt(); 
        }

        //input key 
        System.out.println("Enter key");
        int key = sc.nextInt();

        //finding key 
        for(int i = 0; i< n; i++){
            if(key == arr[i]){
                System.out.println("Key found at position "+ (i+1));
                return;
            }
        }
        System.out.println("Key not found");
        
    }

2. Insertion Opearation
    i. At the end 
    Time complexity: O(1)
    Auxiliary Space: O(1)
    
    public static int insertEl(int arr[], int el, int n, int capacity){
        if(n>=capacity){
            System.out.println("Array capapcity is reached");
            return n;
        }
        arr[n] = el;
        return n+1;
    }
    public static void printArray(int arr[], int n){
        for(int i =0; i < n; i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        return;
    }
    public static void main(String[] args) {
        int[] arr = new int[10];
        Scanner sc = new Scanner(System.in);

        //input n and array elements
        System.out.println("Enter n and then Array elements"); 
        int n = sc.nextInt();
        for(int i = 0; i< n; i++){
            arr[i] = sc.nextInt();
        }

        //input element to append
        System.out.println("Enter element to add");
        int el = sc.nextInt();

        System.out.println("Array before Inserting a element");
        printArray(arr, n);
        
        n = insertEl(arr, el, n, arr.length);
        System.out.println("Array After Inserting a element");
        printArray(arr, n);
    }


    ii. At any position
    Time complexity: O(N)
    Auxiliary Space: O(1)

    public static int insertEl(int arr[], int el, int pos ,int n, int capacity){
        if(n>=capacity){
            System.out.println("Array capapcity is reached");
            return n;
        }
        for(int i =n; i>pos; i--){
            arr[i] = arr[i-1];
        }
        arr[pos] = el;
        return n+1;
    }
    public static void printArray(int arr[], int n){
        for(int i =0; i < n; i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        return;
    }
    public static void main(String[] args) {
        int[] arr = new int[10];
        @SuppressWarnings("resource")
        Scanner sc = new Scanner(System.in);

        //input n and array elements
        System.out.println("Enter n and then Array elements"); 
        int n = sc.nextInt();
        for(int i = 0; i< n; i++){
            arr[i] = sc.nextInt();
        }

        //input element to append
        System.out.println("Enter element to add");
        int el = sc.nextInt();
        
        //input position of element 
        System.out.println("Enter element Position");
        int pos = sc.nextInt();


        System.out.println("Array before Inserting a element");
        printArray(arr, n);
        
        n = insertEl(arr, el, pos,  n, arr.length);
        System.out.println("Array After Inserting a element");
        printArray(arr, n);
    }

3. Delete Operation 
Time Complexity: O(N) 
Auxiliary Space: O(1)

Element to delete is searched by linear search and the elements after the searched one are left shifted.

    public static int deleteEL(int arr[], int key, int pos){
        for(int i = pos; i<arr.length -1; i++){
            arr[i] = arr[i+1];
        }
        return arr.length - 1;
    }
    public static int searchEL(int arr[], int key) {
        for(int i = 0; i<arr.length; i++){
            if(key == arr[i]){
                return i;
            }
        }
        return -1;
    }
    public static void printArray(int arr[], int n){
        for(int i =0; i < n; i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        return;
    }
    public static void main(String[] args) {
        int[] arr = {0, 1, 2, 3, 4, 5};
        int n = arr.length;
        @SuppressWarnings("resource")
        Scanner sc = new Scanner(System.in);
        
        System.out.println("Given array");
        printArray(arr, n);
        
        //input element to delete
        System.out.println("Enter element to delete");
        int key = sc.nextInt();
        
        
        int search = searchEL(arr, key);
        if(search == -1){
            System.out.println("Element is not present in the given array");
            return;
        } else {
            n = deleteEL(arr, key, search);
        }
        System.out.println("Array After Deletation of a element");
        printArray(arr, n);
    }


//Search , insert and delete operation on sorted array
1. Search operation 
    Using Binary Search algorithm
    Time Complexity : O(log(n))
    Auxiliary space: O(log(n))

    public static int search(int arr[],int key, int high, int low){
        if(high < low){
            return -1;
        } 
        int mid = (high+low)/2;
        if(key == arr[mid]){
            return mid;
        }
        if(key>arr[mid]){
            return search(arr, key, high, mid+1);
        } else {
            return search(arr, key, mid-1, low);
        }
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5, 6};

        int n = arr.length-1;
        int key = 5;

        
        System.out.println("Key found at index " + search(arr, key, n, 0));
    }

2. Insert opeartion
    Time complexity : O(N);
    Auxiliary Space : O(1);
    public static int insertEL(int arr[], int n, int capacity, int key ){
        if(n>=capacity){
            return n;
        }

        int i ;
        for(i = n-1; (i>=0 && arr[i] > key); i--){
            arr[i+1] = arr[i];
        }
        arr[i+1] = key;

        return n+1;
    }
    public static void printArray(int arr[], int n){
        for(int i =0; i < n; i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        return;
    }
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int arr[] = new int[20];

        System.out.println("Enter n");
        int n = sc.nextInt();

        System.out.println("Enter array elements");
        for(int i = 0; i< n; i++){
            arr[i] = sc.nextInt();
        }

        System.out.println("Enter element to insert");
        int key = sc.nextInt();

        n  = insertEL(arr, n, arr.length, key);

        System.out.println("Array after");
        printArray(arr, n);
    }

3. Delete Operation
    Time Complexity : O(N)
    Auxiliary Space : O(log N)
    
    public static int search(int arr[],int key, int high, int low){
        if(high < low){
            return -1;
        } 
        int mid = (high+low)/2;
        if(key == arr[mid]){
            return mid;
        }
        if(key>arr[mid]){
            return search(arr, key, high, mid+1);
        } else {
            return search(arr, key, mid-1, low);
        }
    }
    public static int deleteEL(int arr[], int n, int key){
        int pos = search(arr, key, n, 0);

        if(pos == -1){
            System.out.println("Element not found");
            return n;
        }

        for(int i  = pos; i< n; i++){
            arr[i]= arr[i+1];
        }
        return n-1;
    }
    public static void printArray(int arr[], int n){
        for(int i =0; i < n; i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        return;
    }
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int arr[] = new int[20];

        System.out.println("Enter n");
        int n = sc.nextInt();

        System.out.println("Enter array elements");
        for(int i = 0; i< n; i++){
            arr[i] = sc.nextInt();
        }

        System.out.println("Enter element to delete");
        int key = sc.nextInt();

        n = deleteEL(arr, n, key);
        
        System.out.println("Array after");
        printArray(arr, n);
    }

//Printing Sub Arrays
Time Complexity: O(2^n)
Auxiliary Space: O(2^n)
    public static void subArray(int arr[], int start, int end){
        if(end == arr.length){
            return;
        } else if(start > end){
            subArray(arr, 0, end+1);
        } else {
            System.out.print("[");
            for(int i = start; i<end; i++){
                System.out.print(arr[i] + " ");
            }
            System.out.println(arr[end] + "]");
            subArray(arr, start+1, end);
        }
        return;
    }
    public static int search(int arr[],int key, int high, int low){
        if(high < low){
            return -1;
        } 
        int mid = (high+low)/2;
        if(key == arr[mid]){
            return mid;
        }
        if(key>arr[mid]){
            return search(arr, key, high, mid+1);
        } else {
            return search(arr, key, mid-1, low);
        }
    }

    public static void main(String args[]){
        int arr[] = {1, 2, 3};
        subArray(arr, 0, 0);
    }