// Array Syntax
type[] arrayName = new type[size];
type arrayName[] = new type[size];

type[] marks = {val1, val2, val3, ...}; // initialized array 

// 2d array syntax 
type[][] arrayName = new type[rows][columns];

/////OPERATIONS ON ARRAY/////
// Array Searching 
1. Linear Search
goes from one end of an array until the element is found
Time Complexity : O(N) // N is number of elements 

2. Binary Search
this algorhithm is used on sorted array. The elements is found by repeatedly dividing array into half and deciding which part to choose next
Time Complexity : O(log_2 N)

3. Ternary Search
similar to binary search , but in the algorhithm the array is divided into three parts 
Time Complexity : O(log_3 N)

// Reversing an array 
1. Using extra array 
Time Complexity : O(N)
Space Complexity : O(N)

public static void main(String[] args){
    // previous array 
    int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
    // reversed array
    int[] newArr = new int[arr.length];

    for(int i = 0; i< arr.length; i++){
        newArr[i] = arr[arr.length-i-1];
    }
    
    //printing reversed array
    for(int i=0; i<newArr.length; i++){
        System.out.print(newArr[i] + " ");
    }
}


2. Using Temp variable and loop
Time Complexity: O(n)
Auxillary Space Complexity : O(1)

public static void main(String[] args){
    // previous array 
    int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
    int temp;
    
    for(int i=0; i< arr.length/2 ; i++) {
        temp = arr[i];
        arr[i] = arr[arr.length - i- 1];
        arr[arr.length - i- 1] = temp;
    }

    for(int i =0; i< arr.length; i++){
        System.out.println(arr[i]);
    }
}

3. Using Recursion

4. Using Stack


// Array left rotation by d positions 
    //Given an array of integers arr[] of size N and an integer, the task is to rotate the array elements to the left by d positions.
    1. Using Temp array 
    i. Store elements from idx d to n-1 in temp array 
    ii. store elements from idx 1 to d-1 in temp array 
    iii. original array = temp array 

    public class RotateArray {
        public static void rotate(int arr[], int d, int n){
            int[] temp = new int[n];
            int j = 0;
            for(int i = d; i< n; i++){
                temp[j] = arr[i];
                j++;
            }
            for(int i = 0; i<d; i++){
                temp[j] = arr[i];
                j++;
            }
    
            for(int i =0; i<n; i++){
                arr[i] = temp[i];
            }
    
            return;
        }
    
        public static void printArray(int arr[]){
            for(int i =0; i < arr.length; i++){
                System.out.print(arr[i] + " ");
            }
            System.out.println();
            return;
        }
        public static void main(String[] args){
            Scanner sc = new Scanner(System.in);
    
            //Input array size 
            System.out.println("Enter array size and then array elements");
            int n = sc.nextInt();
    
            int[] arr = new int[n];
            //input array 
            for(int i =0; i< n; i++){
                arr[i] = sc.nextInt(); 
            }
    
            //input positions (d)
            System.out.println("Enter d");
            int d = sc.nextInt();
    
            //printing original array 
            System.out.println("Original Array : ");
            printArray(arr);
    
            rotate(arr, d, n);
            
            //printing rotated array
            System.out.println("Printing arry rotated by " + d + " postions");
            printArray(arr);
        }
    }
    