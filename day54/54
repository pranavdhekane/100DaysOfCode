Day 54 : 

A Graph Can be implemented using several techique : 
1. Adjancy List (List of Lists)
2. Adjancy Matrix
3. Edge List 
4. 2D Matrix(implicit graph)

1. Graph using Adjancy List (using Array of Arraylists) : 
static class Edge{
    int src;
    int dest;
    int wt;

    Edge(int src, int dest, int wt){
        this.src = src;
        this.dest = dest;
        this.wt = wt;
    }
}
public static void createGraph(ArrayList<Edge> graph[]){
    for(int i = 0; i< graph.length; i++){
        graph[i] = new ArrayList<Edge>(); // when we create a array graph[] it initilizes with null value that's why we initialsing each graph element with an arraylist so we can store our arraylists
    }

    graph[0].add(new Edge(0, 2, 2));

    graph[1].add(new Edge(1, 2, 10));
    graph[1].add(new Edge(1, 3, 0));

    graph[2].add(new Edge(2, 0, 2));
    graph[2].add(new Edge(2, 1, 10));
    graph[2].add(new Edge(2, 3, -1));

    graph[3].add(new Edge(3, 1, 0));
    graph[3].add(new Edge(3, 2, -1));

}
public static void main(String[] args) {
    int v = 4; // vertices
    @SuppressWarnings("unchecked")
    ArrayList<Edge> graph[] = new ArrayList[v];

    createGraph(graph);

    //print 2's neighbours
    for(int i = 0; i<graph[2].size(); i++){
        Edge e = graph[2].get(i);
        System.out.println(e.dest + " " + e.wt);
    }
}

2. Graph Using Adjancy matrix (not prefreable 1.using more space : O(V^2) and need O(V) time to find neighbours)
stores 0 where edges are not found and 1 where edges are found OR if it is a weighted graph it stores the weight instead of one

0 | 1 | 1
1 | 0 | 0
1 | 0 | 1

this means these vertices has edges {0, 1}, {0, 2}, {1, 0}, {2, 0}, {2, 2} (count just like u count for matrix in math only with 0 ass first {i, j} i = start(row), j = end(colum))

3. Edge list 
it is simply a list of edges it could be arraylist , linkedlist or etc

4. implicit Graph
we consider a 2d array as a graph in this
