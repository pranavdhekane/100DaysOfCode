//Search, Insert, and Delete in an Unsorted Array 

2. Insertion opeartion
    ii. At any position
    Time complexity: O(N)
    Auxiliary Space: O(1)

    public static int insertEl(int arr[], int el, int pos ,int n, int capacity){
        if(n>=capacity){
            System.out.println("Array capapcity is reached");
            return n;
        }
        for(int i =n; i>pos; i--){
            arr[i] = arr[i-1];
        }
        arr[pos] = el;
        return n+1;
    }
    public static void printArray(int arr[], int n){
        for(int i =0; i < n; i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        return;
    }
    public static void main(String[] args) {
        int[] arr = new int[10];
        @SuppressWarnings("resource")
        Scanner sc = new Scanner(System.in);

        //input n and array elements
        System.out.println("Enter n and then Array elements"); 
        int n = sc.nextInt();
        for(int i = 0; i< n; i++){
            arr[i] = sc.nextInt();
        }

        //input element to append
        System.out.println("Enter element to add");
        int el = sc.nextInt();
        
        //input position of element 
        System.out.println("Enter element Position");
        int pos = sc.nextInt();


        System.out.println("Array before Inserting a element");
        printArray(arr, n);
        
        n = insertEl(arr, el, pos,  n, arr.length);
        System.out.println("Array After Inserting a element");
        printArray(arr, n);
    }

3. Delete Operation 
Time Complexity: O(N) 
Auxiliary Space: O(1)

Element to delete is searched by linear search and the elements after the searched one are left shifted.

    public static int deleteEL(int arr[], int key, int pos){
        for(int i = pos; i<arr.length -1; i++){
            arr[i] = arr[i+1];
        }
        return arr.length - 1;
    }
    public static int searchEL(int arr[], int key) {
        for(int i = 0; i<arr.length; i++){
            if(key == arr[i]){
                return i;
            }
        }
        return -1;
    }
    public static void printArray(int arr[], int n){
        for(int i =0; i < n; i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        return;
    }
    public static void main(String[] args) {
        int[] arr = {0, 1, 2, 3, 4, 5};
        int n = arr.length;
        @SuppressWarnings("resource")
        Scanner sc = new Scanner(System.in);
        
        System.out.println("Given array");
        printArray(arr, n);
        
        //input element to delete
        System.out.println("Enter element to delete");
        int key = sc.nextInt();
        
        
        int search = searchEL(arr, key);
        if(search == -1){
            System.out.println("Element is not present in the given array");
            return;
        } else {
            n = deleteEL(arr, key, search);
        }
        System.out.println("Array After Deletation of a element");
        printArray(arr, n);
    }


//Search , insert and delete operation on sorted array
1. Search operation 
    Using Binary Search algorithm
    Time Complexity : O(log(n))
    Auxiliary space: O(log(n))

    public static int search(int arr[],int key, int high, int low){
        if(high < low){
            return -1;
        } 
        int mid = (high+low)/2;
        if(key == arr[mid]){
            return mid;
        }
        if(key>arr[mid]){
            return search(arr, key, high, mid+1);
        } else {
            return search(arr, key, mid-1, low);
        }
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5, 6};

        int n = arr.length-1;
        int key = 5;

        
        System.out.println("Key found at index " + search(arr, key, n, 0));
    }

2. Insert opeartion
    Time complexity : O(N);
    Auxiliary Space : O(1);
    public static int insertEL(int arr[], int n, int capacity, int key ){
        if(n>=capacity){
            return n;
        }

        int i ;
        for(i = n-1; (i>=0 && arr[i] > key); i--){
            arr[i+1] = arr[i];
        }
        arr[i+1] = key;

        return n+1;
    }
    public static void printArray(int arr[], int n){
        for(int i =0; i < n; i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        return;
    }
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int arr[] = new int[20];

        System.out.println("Enter n");
        int n = sc.nextInt();

        System.out.println("Enter array elements");
        for(int i = 0; i< n; i++){
            arr[i] = sc.nextInt();
        }

        System.out.println("Enter element to insert");
        int key = sc.nextInt();

        n  = insertEL(arr, n, arr.length, key);

        System.out.println("Array after");
        printArray(arr, n);
    }

3. Delete Operation
    Time Complexity : O(N)
    Auxiliary Space : O(log N)
    
    public static int search(int arr[],int key, int high, int low){
        if(high < low){
            return -1;
        } 
        int mid = (high+low)/2;
        if(key == arr[mid]){
            return mid;
        }
        if(key>arr[mid]){
            return search(arr, key, high, mid+1);
        } else {
            return search(arr, key, mid-1, low);
        }
    }
    public static int deleteEL(int arr[], int n, int key){
        int pos = search(arr, key, n, 0);

        if(pos == -1){
            System.out.println("Element not found");
            return n;
        }

        for(int i  = pos; i< n; i++){
            arr[i]= arr[i+1];
        }
        return n-1;
    }
    public static void printArray(int arr[], int n){
        for(int i =0; i < n; i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        return;
    }
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int arr[] = new int[20];

        System.out.println("Enter n");
        int n = sc.nextInt();

        System.out.println("Enter array elements");
        for(int i = 0; i< n; i++){
            arr[i] = sc.nextInt();
        }

        System.out.println("Enter element to delete");
        int key = sc.nextInt();

        n = deleteEL(arr, n, key);
        
        System.out.println("Array after");
        printArray(arr, n);
    }

//Printing Sub Arrays
Time Complexity: O(2^n)
Auxiliary Space: O(2^n)
    public static void subArray(int arr[], int start, int end){
        if(end == arr.length){
            return;
        } else if(start > end){
            subArray(arr, 0, end+1);
        } else {
            System.out.print("[");
            for(int i = start; i<end; i++){
                System.out.print(arr[i] + " ");
            }
            System.out.println(arr[end] + "]");
            subArray(arr, start+1, end);
        }
        return;
    }
    public static int search(int arr[],int key, int high, int low){
        if(high < low){
            return -1;
        } 
        int mid = (high+low)/2;
        if(key == arr[mid]){
            return mid;
        }
        if(key>arr[mid]){
            return search(arr, key, high, mid+1);
        } else {
            return search(arr, key, mid-1, low);
        }
    }

    public static void main(String args[]){
        int arr[] = {1, 2, 3};
        subArray(arr, 0, 0);
    }