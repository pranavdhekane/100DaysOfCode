Day 23: 

//addFirst addLast deleteFirst deleteLast example
public class day23 {
    Node head;
    class Node {
        String data;
        Node next;

        Node(String data){
            this.data = data;
            this.next = null;
        }
    }

    //addFirst and addLast
    public void addFirst(String data){
        Node newNode = new Node(data);
        if(head == null){
            head = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    public void addLast(String data){
        Node newNode = new Node(data);
        if(head == null){
            head = newNode;
            return;
        }

        Node currNode = head;
        while(currNode.next != null){
            currNode = currNode.next;
        }
        currNode.next = newNode;
    }

    //print
    public void print(){
        if(head == null){
            System.out.println("Empty list");
            return;
        }

        Node currNode = head;
        while(currNode != null){
            System.out.print(currNode.data + " -> ");
            currNode = currNode.next;
        }
        System.out.println("NULL");
    }

    //deleteFirst & deleteLast
    public void deleteFirst(){
        if(head == null){
            System.out.println("The List is empty");
            return;
        }
        head = head.next;
    }
    
    public void deleteLast(){
        if(head == null){
            System.out.println("The List is empty");
            return;
        }

        if(head.next == null){
            head = null;
            return;
        }

        Node secondLast = head;
        Node lastNode = head.next;
        while(lastNode.next != null){
            secondLast = secondLast.next;
            lastNode = lastNode.next;
        }
        secondLast.next = null;
    }

    public static void main(String[] args) {
        day23 list = new day23();
        list.addFirst("a");
        list.addFirst("is");
        list.print();//is a
        
        list.addLast("list");
        list.print();//is a list

        list.addFirst("this");
        list.print();//this is a list

        list.deleteFirst();
        list.print();//is a list

        list.deleteLast();
        list.print();//is a 
    }
}

//LInkedList using collection frameworks
import java.util.LinkedList;
public static void main(String[] args) {
    LinkedList<String> list = new LinkedList<String>();
    System.out.println(list);//[]
    
    //to add
    list.add("is");
    list.add("a");
    list.addLast("list");
    System.out.println(list);//is a list
    
    list.addFirst("this");
    System.out.println(list);//this is a list
    
    list.push("hi");
    System.out.println(list);//hi this is a list
    
    list.add(0, "hello");
    System.out.println(list);//hello hi this is a list
    
    //to remove
    list.remove();
    System.out.println(list);//hi this is a list
    
    list.remove(1);
    System.out.println(list);//hi is a list

    //length
    System.out.println(list.size());//4

    for(int i=0; i<list.size(); i++){
        System.out.print(list.get(i) + " -> ");
    } System.out.println("NUll");

}

//reversing a linked list
i. reverseIterate
public void reverseIterate(){
    //corner cases
    if(head == null || head.next == null){ 
        return;
    }

    Node prevNode = head;
    Node currNode = head.next;

    while(currNode != null){
        Node nextNode = currNode.next;
        currNode.next = prevNode;

        //update 
        prevNode = currNode;
        currNode = nextNode;
    }
    head.next = null;
    //update head
    head = prevNode;
}