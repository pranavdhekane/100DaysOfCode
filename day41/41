Day 41 : 

// HashSet Problems 

1. Majority Element
Given an integer array of size n, find all elements that appear more than n/3 times;

public class day41{
    public static ArrayList<Integer> majorityEl(int arr[]){
        ArrayList<Integer> list = new ArrayList<>();
        HashMap<Integer, Integer> map = new HashMap<>();
        int size = arr.length;

        for(int i = 0; i<size; i++){
            if(map.containsKey(arr[i])){
                map.put(arr[i], map.get(arr[i])+1);
            } else {
                map.put(arr[i], 1);
            }
        }

        for(int i : map.keySet()){
            if(map.get(i) > size / 3){
                list.add(i);
            }
        }

        return list;
    }
    public static void main(String[] args) {
        // int nums[] = {1, 3, 2, 5, 1, 3, 1, 5, 1};
        int nums[] = {1, 2};
        System.out.println(majorityEl(nums));
    }
}

2. Union Of Two Arrays
public static int union(int arr1[], int arr2[]){
    HashSet<Integer> set = new HashSet<>();

    for(int i = 0; i<arr1.length; i++){
        set.add(arr1[i]);
    }
    for(int i = 0; i<arr2.length; i++){
        set.add(arr2[i]);
    }

    return set.size();
}

3. Intersection Of Two Arrays
public static ArrayList<Integer> intersection(int arr1[], int arr2[]){
    HashSet<Integer> set = new HashSet<>();
    ArrayList<Integer> list = new ArrayList<>();
    for(int i = 0; i<arr1.length; i++){
        set.add(arr1[i]);
    }
    for(int i =0; i<arr2.length; i++){
        if(set.contains(arr2[i])){
            list.add(arr2[i]);
            set.remove(arr2[i]); // once comapared then should be removed
        }
    }
    return list;
}