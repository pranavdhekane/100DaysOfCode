Day 63 : 

//Linked list cycle 

public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null)return false;
        ListNode slow,fast;
        slow=fast=head;
        while(fast!=null&& fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow==fast)return true;
        }
        return false;
    }
}

// Remove Nth node from end of list
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        int count = 0;
        ListNode curr = head;

        while(curr != null){
            count++;
            curr = curr.next;
        }

        if(count == n){
            return head.next;
        }

        int target = count - n -1;
        curr = head.next;
        ListNode prev = head;
        
        for(int i = 0; i<target ; i++){
            curr = curr.next;
            prev = prev.next;
        }
        
        prev.next = curr.next;

        return head;
    }
}