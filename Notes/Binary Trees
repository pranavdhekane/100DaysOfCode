Binary Tree : 

// build tree preorder
public class day30 {
    static class Node{
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    static class BinaryTree{
        static int idx = -1;
        public Node buildTree(int[] nodes){
            idx++;
            if(nodes[idx] == -1){
                return null;
            }
            
            Node newNode = new Node(nodes[idx]);
            newNode.left = buildTree(nodes);
            newNode.right = buildTree(nodes);

            return newNode;            
        }
    }
    public static void main(String[] args) {
        int nodes[] = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};
        BinaryTree tree = new BinaryTree();
        Node root = tree.buildTree(nodes);
        System.out.println(root.data);
    }
}

//Traversal 
1. Preorder Traversal
    // root, left subtree, right subtree
    //1 2 4 -1 -1 5 -1 -1 3 -1 6 -1 -1 
public static void preorder(Node root) {
    if (root == null) {
        System.out.print("-1 ");
        return;
    }

    System.out.print(root.data + " ");
    preorder(root.left);
    preorder(root.right);
}

2.Inorder Traversal 
    //left subtree, root,  right subtree
    //-1 4 -1 2 -1 5 -1 1 -1 3 -1 6 -1
public static void inorder(Node root) {
    if(root == null){
        System.out.print("-1 ");
        return;
    }

    inorder(root.left);
    System.out.print(root.data + " "); 
    inorder(root.right);
}

3. Postorder Traversal
    //left subtree, right subtree, root
    //-1 -1 4 -1 -1 5 2 -1 -1 -1 6 3 1
public static void postorder(Node root){
    if(root == null){
        System.out.print("-1 ");
        return;
    }

    postorder(root.left);
    postorder(root.right);
    System.out.print(root.data + " "); 
}

4. levelOrder Traversal 
public static void levelOrder(Node root) {
    if (root == null) {
        return;
    }

    Queue<Node> q = new LinkedList<>();
    q.add(root);
    q.add(null);

    while (!q.isEmpty()) {
        Node currNode = q.remove();
        if (currNode == null) {
            System.out.println();
            if (q.isEmpty()) {
                break;
            } else {
                q.add(null);
            }
        } else {
            System.out.print(currNode.data + " ");
            if (currNode.left != null) {
                q.add(currNode.left);
            }
            if (currNode.right != null) {
                q.add(currNode.right);
            }
        }

    }
}

//Count of Nodes
public static int countNodes(Node root) {
    if (root == null) {
        return 0;
    }
    return countNodes(root.left) + countNodes(root.right) + 1;
}

//Sum of Nodes
public static int sumOfNodes(Node root) {
    if (root == null) {
        return 0;
    }
    return sumOfNodes(root.left) + sumOfNodes(root.right) + root.data;
    
}
    
//height of tree
public static int height(Node root){
    if(root == null){
        return 0;
    }
    int leftHeight = height(root.left);
    int rightHeight = height(root.right);
    int myHeight = Math.max(leftHeight, rightHeight) + 1;
    return myHeight;
}

//Diameter of tree
Approach One O(n^2)
public static int Diameter(Node root){
        if(root == null){
            return 0;
        }
        int diam1 = Diameter(root.left);
        int diam2 = Diameter(root.right);
        int diam3 = height(root.left) + height(root.right) + 1;

        return Math.max(diam3, Math.max(diam1, diam2));
    }

Approach Two O(n)
static class TreeInfo {
    int ht;
    int diam;

    TreeInfo(int ht,int diam){
        this.ht = ht;
        this.diam = diam;
    }
}

public static TreeInfo Diameter(Node root){
    if(root == null){
        return new TreeInfo(0, 0);
    }

    TreeInfo left = Diameter(root.left);
    TreeInfo right = Diameter(root.right);

    int myHeight = Math.max(left.ht, right.ht) + 1;

    int diam1 = left.diam;
    int diam2 = right.diam;
    int diam3 = left.ht + right.ht + 1;

    int myDiam = Math.max(Math.max(diam1, diam2), diam3);

    TreeInfo myInfo = new TreeInfo(myHeight, myDiam);
    return myInfo;
}