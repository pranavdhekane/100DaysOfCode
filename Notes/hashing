//Hashset
public static void main(String[] args) {
    //decleration
    HashSet<Integer> set = new HashSet<>();

    // insertion in hashset
    set.add(1);
    set.add(2);
    set.add(3);
    set.add(4);
    set.add(1);
    System.out.println(set);

    //search in hashset 
    System.out.println(set.contains(2));
    System.out.println(set.contains(8));

    //removal of elements in hashSets
    set.remove(1);
    set.remove(2);
    System.out.println(set);
    
    //Iterator in HashSets
    Iterator it = set.iterator();

    while (it.hasNext()) {
        System.out.println(it.next());
    }
}

//HashMap
public static void main(String[] args) {
    HashMap<String , Integer> map = new HashMap<>();

    //insertion
        //new key
        map.put("India", 100);
        map.put("China", 150);
        map.put("US", 50);

        System.out.println(map);
        //Key already existing 
        map.put("China", 180);//updates the value
        System.out.println(map);

    // Searching 
    System.out.println(map.containsKey("India")); // returns true or false
    System.out.println(map.get("Inia"));//if key present returns value else returns null

    //Iteration

    for(Map.Entry<String, Integer> e : map.entrySet()){
        System.out.println(e.getKey());
        System.out.println(e.getValue());
        System.out.println(e);
    }

    Set<String> keys = map.keySet();
    for(String key : keys){
        System.out.println(key +"="+ map.get(key));
    }

    //deletation
    map.remove("China");
    System.out.println(map);
}


Hashmap Implementation : 
static class HashMap<K, V> {
    private class Node {
        K key;
        V value;
        public Node(K key , V value) {
            this.key = key;
            this.value = value;                
        }
    }

    private int n; //n = nodes
    private int N; // N = buckets
    private LinkedList<Node> buckets[];

    @SuppressWarnings("unchecked")
    public HashMap(){
        this.N = 4;
        this.buckets = new LinkedList[4];
        for(int i = 0; i<N; i++){
            buckets[i] = new LinkedList<>();
        }
    }

    private int hashFunction(K key){
        int bi = key.hashCode();
        return Math.abs(bi) % N;
    }

    private int searchInLL(K key, int bi){
        LinkedList<Node> ll = buckets[bi];

        for(int i = 0; i<ll.size(); i++){
            if(ll.get(i).key == key){
                return i;
            }
        }

        return -1;
    }

    @SuppressWarnings("unchecked")
    private void rehash(){
        LinkedList<Node> oldBucket[] = buckets;
        buckets = new LinkedList[N*2];

        for(int i = 0; i<N*2; i++){
            buckets[i] = new LinkedList<>();
        }

        for(int i = 0; i<oldBucket.length; i++){
            LinkedList<Node> ll = oldBucket[i];
            for(int j = 0; j<ll.size() ; j++){
                Node node = ll.get(i);
                put(node.key, node.value);
            }
        }
    }

    public void put(K key, V value){
        int bi = hashFunction(key);//bucket index
        int di = searchInLL(key, bi);

        if(di == -1) { //key doesn't exists 
            buckets[bi].add(new Node(key , value));
            n++;
        } else { //key index
            Node node = buckets[bi].get(di);
            node.value = value;
        }

        double lambda = (double)n/N;
        if(lambda > 2.0){
            rehash();
        }
    }

    public V get(K key) {
        int bi = hashFunction(key);
        int di = searchInLL(key, bi);

        if(di == -1){
            return null;
        } else {
            Node node = buckets[bi].get(di);
            return node.value;
        }
    }

    public boolean contains(K key){
        int bi = hashFunction(key);
        int di = searchInLL(key, bi);
        if(di == -1){
            return false;
        } else {
            return true;
        }
    }

    public V remove(K key){
        int bi = hashFunction(key);
        int di = searchInLL(key, bi);
        
        if(bi == -1){
            return null;
        } else {
            Node node = buckets[bi].remove(di);
            n--;
            return node.value;
        }
    }

    public ArrayList<K> keySet(){
        ArrayList<K> keys = new ArrayList<>();

        for(int i = 0; i<buckets.length; i++){ //bi
            LinkedList<Node> ll = buckets[i];
            for(int j = 0; j<ll.size(); j++){ //di
                Node node = ll.get(j);
                keys.add(node.key);
            }
        }
        return keys;
    }

    public boolean isEmpty(){
        return n == 0;
    }
}

public static void main(String[] args) {
    HashMap<String, Integer> map = new HashMap<String,Integer>();

    System.out.println(map.isEmpty());

    map.put("India", 100);
    map.put("US", 50);
    map.put("China", 80);

    System.out.println(map.get("US"));
    
    System.out.println(map.contains("India"));
    System.out.println(map.contains("In"));

    System.out.println(map.remove("China"));
    System.out.println(map.contains("China"));

    System.out.println(map.keySet());

    ArrayList<String> keys = map.keySet();

    for(int i = 0; i<keys.size(); i++){
        System.out.println(keys.get(i) + " " + map.get(keys.get(i)));
    }
}

// Hashing Problems 

1. Majority Element
Given an integer array of size n, find all elements that appear more than n/3 times;

public class day41{
    public static ArrayList<Integer> majorityEl(int arr[]){
        ArrayList<Integer> list = new ArrayList<>();
        HashMap<Integer, Integer> map = new HashMap<>();
        int size = arr.length;

        for(int i = 0; i<size; i++){
            if(map.containsKey(arr[i])){
                map.put(arr[i], map.get(arr[i])+1);
            } else {
                map.put(arr[i], 1);
            }
        }

        for(int i : map.keySet()){
            if(map.get(i) > size / 3){
                list.add(i);
            }
        }

        return list;
    }
    public static void main(String[] args) {
        // int nums[] = {1, 3, 2, 5, 1, 3, 1, 5, 1};
        int nums[] = {1, 2};
        System.out.println(majorityEl(nums));
    }
}

2. Union Of Two Arrays
public static int union(int arr1[], int arr2[]){
    HashSet<Integer> set = new HashSet<>();

    for(int i = 0; i<arr1.length; i++){
        set.add(arr1[i]);
    }
    for(int i = 0; i<arr2.length; i++){
        set.add(arr2[i]);
    }

    return set.size();
}

3. Intersection Of Two Arrays
public static ArrayList<Integer> intersection(int arr1[], int arr2[]){
    HashSet<Integer> set = new HashSet<>();
    ArrayList<Integer> list = new ArrayList<>();
    for(int i = 0; i<arr1.length; i++){
        set.add(arr1[i]);
    }
    for(int i =0; i<arr2.length; i++){
        if(set.contains(arr2[i])){
            list.add(arr2[i]);
            set.remove(arr2[i]); // once comapared then should be removed
        }
    }
    return list;
}

4. Find itinerary from tickets //Find a way from start to end
public class day42 {
    public static String getStart(HashMap<String, String> tick){
        //reverse map
        HashMap<String, String> revMap = new HashMap<>();

        //Storing tick map elements in revrese order
        for(String key: tick.keySet()){
            revMap.put(tick.get(key), key);
        }

        //checking which key of tick is not present as a value in revMap map.
        for(String key: tick.keySet()){
            if(revMap.containsKey(key) == false){
                return key;
            }
        }
        return null;
    }
    public static void main(String[] args) {
        HashMap<String, String> tickets = new HashMap<>();
        tickets.put("Chennai", "Bengaluru");
        tickets.put("Mumbai", "Delhi");
        tickets.put("Goa", "Chennai");
        tickets.put("Delhi", "Goa");

        String start = getStart(tickets);

        while(tickets.containsKey(start)){
            System.out.print(start+"->");
            start = tickets.get(start);
        }
        System.out.println(start);
    }
}

5. Subarray sum equal to K
public static void main(String[] args) {
    int arr[] = {10, 2, -2, -20, 10};
    int k = -10;
    HashMap<Integer, Integer> map = new HashMap<>();//<Sum, freq>

    map.put(0, 1); //empty subArray
    int ans = 0;
    int sum = 0;

    for(int i = 0; i<arr.length; i++){
        sum+=arr[i];

        if(map.containsKey(sum - k)){
            ans += map.get(sum - k);
        }

        if(map.containsKey(sum)){
            map.put(sum, map.get(sum) + 1);
        } else {
            map.put(sum, 1);
        }
    }
    System.out.println(ans);
}