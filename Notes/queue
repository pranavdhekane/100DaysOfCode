//Queue Data Structure
Implementation of Queue using Array : 
static class Queue{
    static int arr[];
    int size;
    static int rear = -1;
    
    Queue(int s){
        arr = new int[s];
        this.size = s;
    }
    public static boolean isEmpty(){
        if(rear == -1){
            return true;
        }
        return false;
    }
    //enque
    public void add(int data){
        if(rear == size -1){
            System.out.println("Full");
            return;
        }
        arr[++rear] = data;
    }

    //dequeue
    public int remove(){
        if(isEmpty()){
            System.out.println("Empty");
            return -1;
        }
        int front = arr[0];
        for(int i = 0; i<rear; i++){
            arr[i] = arr[i+1];
        }
        rear--;
        return front;
    }

    //peek
    public int peek(){
        if(isEmpty()){
            System.out.println("empty");
            return -1;
        }
        return arr[0];
    }
}
public static void main(String[] args) {
    Queue q= new Queue(5);
    q.add(1);
    q.add(2);
    q.add(3);
    q.add(4);
    q.add(5);
    q.add(6);

    System.out.println(q.peek());
    
    System.out.println(q.remove());
    System.out.println(q.remove());
    System.out.println(q.remove());
    System.out.println(q.remove());
    System.out.println(q.remove());
    System.out.println(q.remove());
}

Implementation of Circular Queue using array :
static class Queue{
    static int arr[];
    static int size;
    static int rear = -1;
    static int front = -1;
    
    Queue(int s){
        arr = new int[s];
        this.size = s;
    }

    public static boolean isEmpty(){
        if(rear == -1 && front == -1){
            return true;
        }
        return false;
    }

    public static boolean isFull(){
        if(((rear+1) % size) == front){
            return true;
        }
        return false;
    }
    //enque
    public void add(int data){
        if(isFull()){
            System.out.println("Full");
            return;
        }
        //first element condition
        if(front == -1){
            front = 0;
        }
        rear = (rear + 1) % size;
        arr[rear] = data;
    }

    //dequeue
    public int remove(){
        if(isEmpty()){
            System.out.println("Empty");
            return -1;
        }
        int result = arr[front];
        //single element condition
        if(rear == front){
            front = rear = -1;
        } else {           
            front = (front+1 ) % size;
        }
        return result;
    }

    //peek
    public int peek(){
        if(isEmpty()){
            System.out.println("empty");
            return -1;
        }
        return arr[front];
    }
}
public static void main(String[] args) {
    Queue q= new Queue(3);
    q.add(1);
    q.add(2);
    q.add(3);
    q.add(4);

    System.out.println("Removed "  + q.remove());
    q.add(4);

    while(!q.isEmpty()){
        System.out.println(q.peek());
        q.remove();
    }
}

Implementation of Queue using LinkedList : 
static class Node{
    int data;
    Node next;
    Node(int data){
        this.data = data;
        next = null;
    }
}
static class Queue{
    static Node head = null;
    static Node tail = null;
    
    public static boolean isEmpty(){
        return (head == null && tail == null);
    }

    //enque
    public void add(int data){
        Node newNode = new Node(data);
        if(tail == null){
            head = tail = newNode;
        }
        tail.next = newNode;
        tail = newNode;
    }

    //dequeue
    public int remove(){
        if(isEmpty()){
            System.out.println("Empty");
            return -1;
        }
        int result = head.data;
        if(head == tail){
            tail = null;
        }
        head = head.next;
        return result;
    }

    //peek
    public int peek(){
        if(isEmpty()){
            System.out.println("empty");
            return -1;
        }
        return head.data;
    }
}
public static void main(String[] args) {
    Queue q= new Queue();
    q.add(1);
    q.add(2);
    q.add(3);

    System.out.println("Removed "  + q.remove());
    q.add(4);

    while(!q.isEmpty()){
        System.out.println(q.peek());
        q.remove();
    }
}

Implementation of Queue using Java Collection framework;
public static void main(String[] args) {
    // Queue<Integer> q = new LinkedList<>();
    Queue<Integer> q = new ArrayDeque<>();
    q.add(1);
    q.add(2);
    q.add(3);

    System.out.println("Removed "  + q.remove());
    q.add(4);

    while(!q.isEmpty()){
        System.out.println(q.peek());
        q.remove();
    }
}