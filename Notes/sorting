//Merge sort
Time Complexity : O(nlogn)
public static void conqure(int arr[], int si, int ei, int mid){
    int merge[] = new int[ei-si+1];
    int idx1 = si;
    int idx2 = mid+1;
    int x =0;

    //to sort 
    while(idx1 <= mid && idx2 <= ei){
        if(arr[idx1] >= arr[idx2]){
            merge[x++] = arr[idx2++];
        } else {
            merge[x++] = arr[idx1++];
        }
    }

    //to enter the remained
    while(idx1<=mid){
        merge[x++] = arr[idx1++];
    }
    while(idx2<=ei){
        merge[x++] = arr[idx2++];
    }

    //to copy the merge into original array
    for(int i =0, j =si; i<merge.length; i++, j++){
        arr[j] = merge[i];
    }
}
public static void divide(int arr[], int si, int ei){
    if(si>=ei){
        return;
    }

    int mid = si + (ei-si)/2 ;
    divide(arr, si , mid);
    divide(arr, mid+1, ei);
    conqure(arr, si, ei, mid); 
    
}
public static void main(String[] args) {
    int arr[] = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
    divide(arr, 0, arr.length - 1);
    for(int i =0; i<arr.length; i++){
        System.out.print(arr[i] + " ");
    }
}

//Quick Sort 
Time Complexity : Average : O(nlogn), worst : O(n^2) // worst incase of array is sorted in ascending or descending order
public static void QuickSort(int arr[], int low, int high) {
    if (low < high) {
        int pivot = partition(arr, low, high);
        QuickSort(arr, low, pivot - 1);
        QuickSort(arr, pivot + 1, high);
    }
}
public static int partition(int arr[], int low, int high){
    int pivot= arr[high];
    int i = low -1;

    for(int j = low; j<high; j++){
        if(arr[j] < pivot){
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    z
    i++;
    int temp = arr[i];
    arr[i] = arr[high];
    arr[high] = temp;
    return i;
}
public static void main(String[] args) {
    int arr[] = { 0, 23, 45, 6 };
    QuickSort(arr, 0, arr.length -1);
    for(int i = 0;i<arr.length; i++){
        System.out.print(arr[i] + " ");
    }
}
    
//Bubble sort
public static void main(String [] args){
    int arr[] = { 7 , 9, 3, 5, 2};
    for(int i = 0; i< arr.length-1; i++){
        for(int j = 0; j < arr.length-i-1; j++){
            if(arr[j] > arr[j+1]){
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }

    for(int i = 0; i<arr.length; i++){
        System.out.print(arr[i] + " ");
    }
}

//Selection Sort

public static void main(String [] args){
    int arr[] = { 7 , 9, 3, 5, 2};
    for(int i = 0; i< arr.length-1; i++){
        int min = i;
        for(int j=i+1; j<arr.length; j++){
            if(arr[min] > arr[j]){
                min = j;
            }
        }
        int temp = arr[i];
        arr[i] = arr[min];
        arr[min] = temp;
    }

    for(int i = 0; i<arr.length; i++){
        System.out.print(arr[i] + " ");
    }
}

//Insertion Sort
public static void main(String [] args){
    int arr[] = { 7 , 9, 3, 5, 2};
    for(int i = 0; i<arr.length ; i++){
        int current = arr[i];
        int j  =i-1;
        while(j>=0 && current < arr[j] ){
            arr[j+1] = arr[j];
            j--;

        }
        arr[j+1] = current;
    }

    for(int i = 0; i<arr.length; i++){
        System.out.print(arr[i] + " ");
    }
}