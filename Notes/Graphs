A Graph Can be implemented using several techique : 
1. Adjancy List (List of Lists)
2. Adjancy Matrix
3. Edge List 
4. 2D Matrix(implicit graph)

1. Graph using Adjancy List (using Array of Arraylists) : 
static class Edge{
    int src;
    int dest;
    int wt;

    Edge(int src, int dest, int wt){
        this.src = src;
        this.dest = dest;
        this.wt = wt;
    }
}
public static void createGraph(ArrayList<Edge> graph[]){
    for(int i = 0; i< graph.length; i++){
        graph[i] = new ArrayList<Edge>(); // when we create a array graph[] it initilizes with null value that's why we initialsing each graph element with an arraylist so we can store our arraylists
    }

    graph[0].add(new Edge(0, 2, 2));

    graph[1].add(new Edge(1, 2, 10));
    graph[1].add(new Edge(1, 3, 0));

    graph[2].add(new Edge(2, 0, 2));
    graph[2].add(new Edge(2, 1, 10));
    graph[2].add(new Edge(2, 3, -1));

    graph[3].add(new Edge(3, 1, 0));
    graph[3].add(new Edge(3, 2, -1));

}
public static void main(String[] args) {
    int v = 4; // vertices
    @SuppressWarnings("unchecked")
    ArrayList<Edge> graph[] = new ArrayList[v];

    createGraph(graph);

    //print 2's neighbours
    for(int i = 0; i<graph[2].size(); i++){
        Edge e = graph[2].get(i);
        System.out.println(e.dest + " " + e.wt);
    }
}

2. Graph Using Adjancy matrix (not prefreable 1.using more space : O(V^2) and need O(V) time to find neighbours)
stores 0 where edges are not found and 1 where edges are found OR if it is a weighted graph it stores the weight instead of one

0 | 1 | 1
1 | 0 | 0
1 | 0 | 1

this means these vertices has edges {0, 1}, {0, 2}, {1, 0}, {2, 0}, {2, 2} (count just like u count for matrix in math only with 0 ass first {i, j} i = start(row), j = end(colum))

3. Edge list 
it is simply a list of edges it could be arraylist , linkedlist or etc

4. implicit Graph
we consider a 2d array as a graph in this



Graph Traversals 

1. Breadth First Search (BFS) : 
Time Complexity : O(V + E) // V= vertices and E = edges

Algorhithm
// create a queue, boolean array to track status of vertices
// add the start (any vertice of graph)
// checck the status(its already printed or not) of vertice
// if not  i. print vertice ii. change status  iii. add vertices neighbours to queue
// repeat 3 and 4 until the queue is empty(using while loop)

public class day55 {
    public static class Edge{
        int src;
        int dest;

        Edge(int s, int d){
            this.src = s;
            this.dest = d;
        }
    }

    public static void createGraph(ArrayList<Edge> graph[]){
        for(int i = 0; i<graph.length; i++){
            graph[i] = new ArrayList<Edge>();
        }

        graph[0].add(new Edge(0, 1));
        graph[0].add(new Edge(0, 2));

        graph[1].add(new Edge(1, 0));
        graph[1].add(new Edge(1, 3));

        graph[2].add(new Edge(2, 0));
        graph[2].add(new Edge(2, 4));
        
        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge(3, 4));
        graph[3].add(new Edge(3, 5));

        graph[4].add(new Edge(4, 2));
        graph[4].add(new Edge(4, 3));
        graph[4].add(new Edge(4, 5));

        graph[5].add(new Edge(5, 3));
        graph[5].add(new Edge(5, 4));
        graph[5].add(new Edge(5, 6));

        graph[6].add(new Edge(6, 5));
    }

    public static void bfs(ArrayList<Edge> graph[], int V){
        Queue<Integer> q = new LinkedList<>();
        boolean visited[] = new boolean[V]; // to set a track of visited elements

        q.add(0);

        while(!q.isEmpty()){
            int curr = q.remove();
            if(visited[curr] == false){ //if visited is true then it's all ready printed but if it is then we 
                System.out.print(curr + " "); //print the vertice
                visited[curr] = true; //set vertice track to true
                for(int j = 0; j< graph[curr].size(); j++){ //add the neighbouring elements of that vertice to queue
                    q.add(graph[curr].get(j).dest);
                }
            }
        }
    }
    public static void main(String[] args) {
        int V = 7;

        /*

            1 ---- 3
           /       | \ 
          0        |  5 --- 6
           \       | /
            2 ---- 4

        */

        @SuppressWarnings("unchecked")
        ArrayList<Edge> graph[] = new ArrayList[V];

        createGraph(graph);
        bfs(graph, V);
    }
}

// if the array is in parts means jar array ha tukdya tukdya madhe asel tar use this instead
// so u can find the start where visited value is false it is separated from other vertices like a vertice with degree 0

public static void bfs(ArrayList<Edge> graph[], int V, boolean visited[], int start){
    Queue<Integer> q = new LinkedList<>();

    q.add(start);

    while(!q.isEmpty()){
        int curr = q.remove();
        if(visited[curr] == false){ //if visited is true then it's all ready printed but if it is then we 
            System.out.print(curr + " "); //print the vertice
            visited[curr] = true; //set vertice track to true
            for(int j = 0; j< graph[curr].size(); j++){ //add the neighbouring elements of that vertice to queue
                q.add(graph[curr].get(j).dest);
            }
        }
    }
}
public static void main(String[] args) {
    int V = 7;
    @SuppressWarnings("unchecked")
    ArrayList<Edge> graph[] = new ArrayList[V];

    createGraph(graph);
    boolean visited[] = new boolean[V]; // to set a track of visited elements
    for(int i = 0; i< V; i++){
        if(visited[i] == false) 
        bfs(graph, V, visited, i);
    }
}

2. Depth First Search (DFS) : 
Time Complexity : O(V + E)
public static void dfs(ArrayList<Edge> graph[], boolean visited[], int curr){
    System.out.print(curr + " ");
    visited[curr] = true;
    for(int i = 0; i<graph[curr].size(); i++){
        Edge e = graph[curr].get(i);
        if(visited[e.dest] == false){
            dfs(graph, visited, e.dest);
        }
    }
    
}
public static void main(String[] args) {
    int V = 7;

    /*

        1 ---- 3
       /       | \ 
      0        |  5 --- 6
       \       | /
        2 ---- 4

    */

    @SuppressWarnings("unchecked")
    ArrayList<Edge> graph[] = new ArrayList[V];

    createGraph(graph);
    boolean visited[] = new boolean[V]; // to set a track of visited elements
    dfs(graph, visited, 0);
}

// and again if the graph is in tukde use this 
for(int i = 0; i<visited.length; i++) {
    if(visited[i] == false){
        dfs(graph, visited, i);
    }
}
