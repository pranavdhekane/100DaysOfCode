String class is immutable.

//string declearation
String strName = "String";\
String strName = new String("String");

//String concatnation
String str1 = "string 1";
String str2 = "string 2";
String str = str1 + str2;
output = str1.concat(str2);

//String length
str.length();

// to access each character in a string 
for(int i =0; i<str.length(); i++){
    System.out.println(str.charAt(i));
}

//string comparison
str1.compareTo(str2); // compare lexicographiclly
str1.compareToIgnoreCase(str2); // Ignore case while comparing

if equal : return 0
if str1 > str2 : return +ve
if str1 < str2 : return -ve

//Substring
str.substring(begining idx, ending idx);

//First Occurence
int output = str.indexOf("String"); // returns first occurnce of specified string, if string is not present returns -1

//change cases
str = "pranav";
str.toUpperCase(); //returns "PRANAV"
str.toLowerCase(); //returns "pranav"

//string trim()
str.trim(); // returns removed spaces from both ends of string without affecting the spaces in between

//String Replace(oldchar, newchar)
str.replace('p', 'q'); // return string with all 'q' instead of 'p'
//for StringBuilder and StringBuffer class there are three args , replace(startIdx, endIndex, string);

//string containes 
str.contains("pranav"); // returns true if specifed string is present

//str to char array
String str = "pranav";
char[] ch = str.toCharArray();// returns character array ['p', 'r', 'a', 'n', 'a', 'v']

//string startwith
str.startsWith("P"); //returns true if str starts with specified string 

//some methods
    charAt : sb.charAt(idx); //Give character at idx as ascii value and if the idx is not present in given string , throws a exception named StringIndexOutOfBoundsException.
    setCharAt : sb.setCharAt(idx, 'el'); // changes character at idx
    insert : sb.insert(idx, 'el'); // add character at idx and shift other to right(idx+1 for all right el);
    delete : sb.delete(idx, end); //delete from idx until end(end is excluded)
    append : sb.append('el'); //add el at the end
    length : sb.length();

//String buffer 
it is mutable 
StringBuffer sb = new StringBuffer("Pranav");

    Methods	    Action Performed
    append()	Used to add text at the end of the existing text.
    length()	The length of a StringBuffer can be found by the length( ) method
    capacity()	the total allocated capacity can be found by the capacity( ) method
    charAt()	This method returns the char value in this sequence at the specified index.
    delete()	Deletes a sequence of characters from the invoking object
    deleteCharAt()	Deletes the character at the index specified by the loc
    ensureCapacity()	Ensures capacity is at least equal to the given minimum.
    insert()	Inserts text at the specified index position
    length()	Returns the length of the string  


//string builder 
StringBuilder sb = new StringBuilder("Pranav");
String Builder is not thread-safe and high in performance compared to String buffer.
also it is mutable.


//When what should be used
If a string is going to remain constant throughout the program, then use the String class object because a String object is immutable.
If a string can change (for example: lots of logic and operations in the construction of the string) and will only be accessed from a single thread, using a StringBuilder is good enough.
If a string can change and will be accessed from multiple threads, use a StringBuffer because StringBuffer is synchronous, so you have thread-safety.
If you dont want thread-safety than you can also go with StringBuilder class as it is not synchronized.

//Conversion
1. String to StringBuilder and StringBuffer

String str = "pranav";
StringBuffer sb = new StringBuffer(str);
StringBuilder sbl = new StringBuilder(str);

2. StringBuffer & StringBuilder to string // using toString()

StringBuffer sb = new StringBuffer("pranav");
StringBuilder sbl = new StringBuilder("pranav");
String str = sb.toString();
String str1 = sbl.toString();

3. StringBuffer to StringBuilder and vice versa
//first converting them to String and then into each other using constructors

StringBuffer sb = new StringBuffer("Geeks");
String str = sb.toString();
StringBuilder sbl = new StringBuilder(str);
    
//StringTokenizer Class
This class is used to break strings into tokens.
    //Delimiters are the characters that separate tokens, usually delimiters are spaces, new lines, tabs;

    //Constructors 
    1. StringTokenizer(String str); // Default delimiters like new line , space, tab, etc.
    2. StringTokenizer(String str, String delim);//delim is a set of delimiters that are used to tokenize the string // Muliple delims can also be passed in a single string    
    3. StringTokenizer(String str, String delim, bollean flag); //is flag is false delimiters are used to separate the tokens , if true delimiters are also considered as tokens;

    //Methods 
    countTokens(); //returns total number of tokens
    hasMoreTokens(); //test if tokens are present or not
    nextElement(); //Returns object rather than string
    hasMoreElements; //returns same as hasMoreTokens()
    nextToken(); returns next token from given StringTokenizer

//StringJoiner Class
StringJoiner Class is used to construct a sequence of string separated by delimeter and optionally starting with prefix and ending with suffix.

StringJoiner sj = new StringJoiner(delim);
StringJoiner sj = new StringJoiner(delim, prefix, suffix);

    //methods
    add(); //adds a copy of charSequence value as the next element of StringJoiner value.
    length(); //returns length
    str.merge(str1);// merges two stringJoiner 
    toString();
    setEmptyValue(); //Sets an empty value

    public static void main(String[] args) {
        StringJoiner sj = new StringJoiner(";");
        sj.setEmptyValue("this is empty"); 
        System.out.println(sj); // this is empty

        sj.add("pranav");
        sj.add("dhekane");
        sj.add("is");
        sj.add("great");

        System.out.println(sj); //pranav;dhekane;is;great

        StringJoiner sj1 = new StringJoiner("_");
        sj1.add("hi");
        sj1.add("my");
        sj1.add("name");
        sj1.add("is");
        sj1.add("pranav");

        System.out.println(sj1);//hi_my_name_is_pranav

        sj.merge(sj1);

        System.out.println(sj);//pranav;dhekane;is;great;hi_my_name_is_pranav
        System.out.println(sj1);//hi_my_name_is_pranav
    }



/////Basic Operations on string/////

1. Searching a Character in a string 

i. Using indexOf(char c) // returns idx of first occurence of char c , if not present returns -1
public static void main(String[] args) {
    String str = "pranav";
    char c = 'a';
    int idx = str.indexOf(c); //2
    System.out.println(c + " found at idx "+ idx);
}  

ii. Using lastIndexOf(char c) //returns idx of last occurence of char c, if not present returns -1
public static void main(String[] args) {
    String str = "pranav";
    char c = 'a';
    int idx = str.lastIndexOf(c);//4
    System.out.println(c + " found at idx "+ idx);
}  

iii. Using indexOf(char c, int indexFrom) // takes parameters as the character and the number from where the searching will start, return is same as indexOf()
public static void main(String[] args) {
    String str = "pranav";
    char c = 'a'; 
    int idx = str.indexOf(c, 3); // 4
    System.out.println(c + " found at idx "+ idx);
} 

iv. Using lastIndexOf(char c, int indexFrom) // takes parameters, character  and the number before from the last index will be calculatd , return same as lastIndexOf();
public static void main(String[] args) {
    String str = "pranav";
    char c = 'a';
    int idx = str.lastIndexOf(c, 3); // 2  , in pranav , at 3rd index there is 'n' and according to this the last index would be 2, but the indexFrom is >= 4 it would return the last index as 4
    System.out.println(c + " found at idx "+ idx);
}  

2. Searching a substring in a string 
//Using contain() //return a boolean val
public static void main(String[] args) {
String str = "Hi, I am Pranav";
Boolean yes = str.contains("am");
System.out.println(yes);
} 

3. Reversing a String 

i.Using Loops
public static void main(String[] args) {
    String str = "Pranav";
    StringBuilder rev = new StringBuilder();
    for(int i = str.length() - 1; i>=0; i--){
        rev.append(str.charAt(i));
    }
    System.out.println("Reversed String : "+ rev.toString());
}  

ii.Using inbuilt method
public static void main(String[] args) {
    String str = "Pranav";
    StringBuffer rev = new StringBuffer(str);
    rev.reverse();
    System.out.println(rev.toString());
} 

4. Left and right rotation of a string by d positions
